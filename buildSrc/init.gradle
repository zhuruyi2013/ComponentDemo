def keyAliasLocal = "zry"
def keyPasswordLocal = "123qweasd"
def storePasswordLocal = "123qweasd"
def keystoreFilePath = "../zry.keystore"

def keyStoreConfigFile = getParamFile()
if ("" != keyStoreConfigFile && null != keyStoreConfigFile) {
    Properties keystoreProperties = new Properties()
    File keystorePropertiesFile = project.file(keyStoreConfigFile)
    // read properties
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(keystorePropertiesFile.newDataInputStream())
    }

    keystoreFilePath = keystoreProperties.getProperty("storeFile")
    keyPasswordLocal = keystoreProperties.getProperty("storePassword")
    keyAliasLocal = keystoreProperties.getProperty("keyAlias")
    storePasswordLocal = keystoreProperties.getProperty("keyPassword")
}

subprojects {

    project.plugins.apply("kotlin-kapt")

    project.plugins.apply("kotlin-android-extensions")

    if (project.isApplication.toBoolean()) {
        // 当前 module 导入 application plugin
        project.plugins.apply("com.android.application")
        project.plugins.apply("walle")
        project.plugins.apply("com.alibaba.arouter")
//        project.plugins.apply("com.sensorsdata.analytics.android")
//        if (project.hasProperty("aspect")) {
//            println "enable aspectJ property, apply sensor and aspectj plugin"
//            project.plugins.apply("android-aspectjx")
//        }
    } else {
        project.plugins.apply("com.android.library")
    }
    project.plugins.apply("kotlin-android")

    android {
        dexOptions {
            preDexLibraries true
            maxProcessCount 8
        }

        compileSdkVersion Versions.compileSdkVersion

        lintOptions {
            checkReleaseBuilds false
            abortOnError false
            disable 'InvalidPackage'
        }

        androidExtensions {
            experimental = true
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        defaultConfig {
            minSdkVersion Versions.minSdkVersion
            targetSdkVersion Versions.targetSdkVersion
            versionCode Versions.versionCode
            versionName Versions.versionName
            consumerProguardFiles 'proguard-rules.pro'

            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

            // Enabling multidex support.
            multiDexEnabled true
            multiDexKeepProguard file('../multiDexKeep.pro')

            aaptOptions {
                cruncherEnabled = false
                useNewCruncher = false
            }

            ndk {
                // 设置支持的SO库架构
                abiFilters 'armeabi-v7a'
            }

            resConfigs "zh-rTW", "zh-rCN"

            //为了解决部分第三方库重复打包了META-INF的问题
            packagingOptions {
                exclude 'META-INF/DEPENDENCIES.txt'
                exclude 'META-INF/dependencies.txt'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'LICENSE.txt'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/license.txt'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/notice.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/LGPL2.1'
                exclude 'META-INF/MANIFEST.MF'
            }

            sourceSets {
                main.java.srcDirs += main.kotlin.srcDirs
            }

            android.compileOptions.sourceCompatibility 1.8
            android.compileOptions.targetCompatibility 1.8
        }

        sourceSets {
            main.java.srcDirs += main.kotlin.srcDirs
        }

        if (project.isApplication.toBoolean()) {
            signingConfigs {
                release {
                    keyAlias "$keyAliasLocal"
                    keyPassword "$keyPasswordLocal"
                    storeFile file("$keystoreFilePath")
                    storePassword "$storePasswordLocal"
                }

                debug {
                    keyAlias "$keyAliasLocal"
                    keyPassword "$keyPasswordLocal"
                    storeFile file("$keystoreFilePath")
                    storePassword "$storePasswordLocal"
                }
            }
            buildTypes {
                release {
                    //混淆
                    minifyEnabled true
                    // 移除无用的resource文件
                    shrinkResources true
                    zipAlignEnabled true
                    resValue "string", "app_name", "ComponentDemo"
                    //加载默认混淆配置文件
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    debuggable false
                    signingConfig signingConfigs.release
                }

                debug {
                    debuggable true
                    resValue "string", "app_name", "ComponentDemo DEBUG"
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.release
                }
            }
        }
    }

    configurations.all {
        resolutionStrategy {
            preferProjectModules()
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    configurations {
        ktlint
    }

    dependencies {
        ktlint "com.github.shyiko:ktlint:0.24.0"
        // additional 3rd party ruleset(s) can be specified here
        // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
        // ktlint will pick them up
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/shyiko/ktlint#usage for more
    }
    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.github.shyiko.ktlint.Main"
        args "-F", "src/**/*.kt"
    }
}

project(':app') {
    android {
        defaultConfig {
            applicationId Versions.applicationId
        }

        walle {
            // 指定渠道包的输出路径
            apkOutputFolder = new File("${project.buildDir}/channels")
            // 定制渠道包的APK的文件名称
            apkFileNameFormat = 'ComponentAndroid_${versionName}(${versionCode})_${buildTime}_${channel}_${buildType}.apk'
            // 渠道配置文件
            configFile = new File("${project.getProjectDir()}/channleConfig.json")
        }

        flavorDimensions "all"
    }

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
    }

    allprojects {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    //TODO multidex
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion Versions.support_lib
//                }
//            }
//            if (requested.group == 'android.arch.core') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion '1.1.1'
//                }
//            }
//        }
//    }
}

project(':secondmodule') {

    android {
        resourcePrefix "${project.getName()}_"

        if (project.isApplication.toBoolean()) {
            defaultConfig {
                applicationId Versions.applicationId + "." + project.name
            }
            sourceSets {
                main {
                    manifest.srcFile 'src/debug/second_AndroidManifest.xml'
                    java.srcDirs += 'src/debug/java'
                }
            }
        } else {
            sourceSets {
                main {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java {
                        exclude 'src/debug/**'
                    }
                    resources {
                        exclude 'src/debug/**'
                    }
                }
            }
        }
    }
}

project(':thirdmodule') {

    android {
        resourcePrefix "${project.getName()}_"

        if (project.isApplication.toBoolean()) {
            defaultConfig {
                applicationId Versions.applicationId + "." + project.name
            }
            sourceSets {
                main {
                    manifest.srcFile 'src/debug/third_AndroidManifest.xml'
                    java.srcDirs += 'src/debug/java'
                }
            }
        } else {
            sourceSets {
                main {
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                    java {
                        exclude 'src/debug/**'
                    }
                    resources {
                        exclude 'src/debug/**'
                    }
                }
            }
        }
    }
}



def getParamFile() {
    return findProperty("keystore")
}
